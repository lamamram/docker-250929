networks:
  stack-php:
    name: stack-php
    driver: bridge
    ipam:
      config:
        - subnet: 172.19.0.0/16
          gateway: 172.19.0.1

volumes:
  db_data:
   name: db_data
  ## création de 3 volumes nfs pour servir des fichiers conf
  nfs-vol-db:
    name: nfs-vol-db
    # les éléments du serveur NFS sont téléchargés dans l'emplacement local (/var/lib/docker/volumes/...)
    driver: local
    driver_opts:
      type: nfs
      # langage nfs: o et device commposent une url
      o: addr=127.0.0.1,ro
      device: :/mnt/nfs-dir/initdb.d

## service = définition d'un conteneur qui sera répiqué dans l'infra
services:
  # nom du service
  db:
    container_name: stack-php-mariadb
    image: mariadb:11.4
    restart: unless-stopped
    networks:
      - stack-php
    env_file:
      - .env
    volumes:
      # :ro => le fichier monté est en lecture seule dans le conteneur
      # - ./mariadb-init.sql:/docker-entrypoint-initdb.d/mariadb-init.sql:ro
      - nfs-vol-db:/docker-entrypoint-initdb.d:ro
      - db_data:/var/lib/mysql
    profiles:
      - build
    
  fpm:
    container_name: stack-php-fpm
    image: php:8.3.26-fpm-trixie
    restart: unless-stopped
    networks:
      - stack-php
    env_file:
      - .env
    volumes:
      - ./index.php:/srv/index.php:ro
      - ./pdo_mysql.so:/usr/local/lib/php/extensions/no-debug-non-zts-20230831/pdo_mysql.so
      - ./pdo.ini:/usr/local/etc/php/conf.d/pdo.ini
    # le service maradb doit être démarré avant le service fpm
    depends_on:
      - db
    profiles:
      - build
  
  web:
    container_name: stack-php-nginx
    image: nginx:1.29-bookworm-perl
    restart: unless-stopped
    networks:
      - stack-php
    ports:
      - 8080:80
    volumes:
      - ./vhost.conf:/etc/nginx/conf.d/vhost.conf:ro
    depends_on:
      - fpm
    # lancé avec docker compose --profile build up -d
    profiles:
      - build

####### tâches admisnistratives #######

## backup à froid => sans conteneur de base de données
  ## pour lancer la tâche: docker compose run --rm backup
  backup:
    image: alpine:3.22.1
    # pas besoin de réseau ici
    network_mode: none
    volumes:
      # utilisation du volume db_data préexistant
      # /data est créé automatiquement
      - db_data:/data:ro
      # les deux /dump sont créés automatiquement
      - ./dump:/dump
    # remplace la commande par défaut de l'image alpine
    command: tar -cvzf /dump/backup.tar.gz /data
    profiles:
      - task
    
  